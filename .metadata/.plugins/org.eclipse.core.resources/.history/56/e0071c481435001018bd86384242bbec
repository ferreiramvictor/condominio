package com.condominio.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.condominio.model.Morador;
import com.condominio.repository.MoradorRepository;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*") // Permite todas as origens (apenas para desenvolvimento!)
public class AuthController {
    
    @Autowired
    private MoradorRepository moradorRepository;
    
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Morador morador) {
        Morador moradorExistente = moradorRepository.findByLoginAndSenha(morador.getLogin(), morador.getSenha());
        
        if (moradorExistente != null) {
            Map<String, String> response = new HashMap<>();
            response.put("nome", moradorExistente.getNome());
            response.put("apartamento", moradorExistente.getApartamento());
            response.put("bloco", moradorExistente.getBloco());
            response.put("contato", moradorExistente.getContato());
            
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(401).body("Login ou senha inválidos.");
        }
    }
    @PostMapping("/cadastrar")
    public ResponseEntity<?> cadastrarMorador(@RequestBody Morador morador) {
        try {
            // Gera o login automaticamente (apartamento + bloco)
            String login = morador.getApartamento() + morador.getBloco();
            morador.setLogin(login);

            // Valida se o login já existe
            if (moradorRepository.findByLogin(login) != null) {
                return ResponseEntity.badRequest().body("Já existe um morador com este apartamento/bloco.");
            }

            // Salva no banco de dados
            moradorRepository.save(morador);
            
            // Retorna os dados do morador (sem senha)
            Map<String, String> response = new HashMap<>();
            response.put("mensagem", "Morador cadastrado com sucesso!");
            response.put("login", login); // Ex: "103A"
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Erro ao cadastrar: " + e.getMessage());
        }
    }
    
 // AvisoController.java
    @RestController
    @RequestMapping("/api/avisos")
    @CrossOrigin(origins = "*")
    public class AvisoController {

        @Autowired
        private AvisoRepository avisoRepository;

        @GetMapping
        public List<Aviso> listarAvisos() {
            return avisoRepository.findAllByOrderByDataDesc();
        }
    }
    
 // ReservaController.java
    @PostMapping("/reservas")
    public ResponseEntity<?> criarReserva(@RequestBody Reserva reserva) {
        reserva.setStatus("Pendente");
        reservaRepository.save(reserva);
        return ResponseEntity.ok("Reserva solicitada!");
    }
}
